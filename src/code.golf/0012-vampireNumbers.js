const vampireNumbersCode = print => {
  p = (f, n) => (new Array(n)).fill().map(f) //repeat function n times
  fn = (a,n)=>{
    let l=a.length;
    for(i=0;i<l+1;i++){
      for(m=0;m<l+1;m++){
        let temp=a[i%l];
        a.splice(i%l,1);
        a.splice(m%l, 0, temp);
        if (!(a[0]=="0" || a[l/2]=="0") && !(a[(l/2)-1]=="0" || a[l-1]=="0")) {
          combo=a.join("");
          const c = parseInt(combo.substr(0, l/2));
          const d = parseInt(combo.substr(l/2, l/2));
          if (c*d==n)return true;
        }
      }
    }
    return false;
  };
  const answers = [];
  for(n=1;n<=1000000;n++){//1260,102510,104260
    let a=(n+"").split(""),
    l=a.length;
    if (!(l%2) && fn(a,n)) answers.push(n);
  }
  // Object.keys(answers).map(a=>print(a));
  answers.map(a=>print(a));
};

const vampireNumbers = () => {
  let output = [];
  vampireNumbersCode(str => output.push(str + "\n"));
  return output.join("").trim(); //for some reason, it won't return a successful match if `trim` isn't used
};

const vampireNumbersTests = [
  ['', `1260
1395
1435
1530
1827
2187
6880
102510
104260
105210
105264
105750
108135
110758
115672
116725
117067
118440
120600
123354
124483
125248
125433
125460
125500
126027
126846
129640
129775
131242
132430
133245
134725
135828
135837
136525
136948
140350
145314
146137
146952
150300
152608
152685
153436
156240
156289
156915
162976
163944
172822
173250
174370
175329
180225
180297
182250
182650
186624
190260
192150
193257
193945
197725
201852
205785
211896
213466
215860
216733
217638
218488
226498
226872
229648
233896
241564
245182
251896
253750
254740
260338
262984
263074
284598
284760
286416
296320
304717
312475
312975
315594
315900
319059
319536
326452
329346
329656
336550
336960
338296
341653
346968
361989
362992
365638
368550
369189
371893
378400
378418
378450
384912
386415
392566
404968
414895
416650
416988
428980
429664
447916
456840
457600
458640
475380
486720
489159
489955
498550
516879
529672
536539
538650
559188
567648
568750
629680
638950
673920
679500
729688
736695
738468
769792
789250
789525
792585
794088
809919
809964
815958
829696
841995
939658`]
];
